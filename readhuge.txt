=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================

=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
=======================================
 Breaking the VB Textbox 64K Limit
=======================================

You don't have to be limited to 64K size files for a Textbox control in VB6.  There is a way to load, edit and save plain text files, UNLMITED by file size using the Standard VB6 Textbox control. Please note that this method works on NT, Windows 2000, XP and Vista.  If you're coding for systems that use Win95/98 or ME this method will not work.

Begin by loading the readhuge.txt file that is in the application path choosing the API Unlimited File Size option.  Even though this file is almost a half a meg (500K) it will load with no problem.  Next, choose the normal VB method of loading a text file by choosing the 64K text limit option button and try to load this same readhuge.txt file.  You will get an error message that the file is too large!

I actually discovered this helpful method by accident. One day, when copying and pasting in a Textbox control, I noticed that I could paste virtually any size string into a standard VB6 Textbox.  The file displayed properly.  I could edit, add text and save the file with no problem.  Nothing was lost.

It seems the Textbox limitation only occurs when trying to assign a file or string to the Text property.  In practice you can paste a string of any size into a Textbox control and it will display and can be edited and saved as well.  With this knowledge in hand I figured why not use the Windows Clipboard to load huge text files.  And IT WORKED!

After some feedback from Kenneth Buckmaster and Rob C. there is even a better method.  So I updated this submission and changed the Clipboard method to an API method. It gives the same results and doesn't mess with the clipboard. The actual code to accomplish this is just a few lines and is found in the OpenFile Sub in the modFileSize.bas Module.

For purposes of this example project I have placed two option controls atop the Textbox control.  Option 1 will load a file using the standard method of loading a text file into a Textbox control.  Option 2 uses the API method.  If you choose option 1 and the file is too large the error routine will catch it tell you the file is too big.  If you choose option 2 you will be able to load virtually any file size in the text box control.

For the purposes of testing, I have repeated these paragraphs several times to make the file size of this readhuge.txt file go well beyond the 64K limit.  I am using the API method in the next update of iQ Notepad here on PSC which should be available soon.  The current version uses a rich Textbox but the problem is even though you save and load using plain text the file is always interpreted by Windows as an RTF file which is what it is.  Now, with this new method, files will always be interpreted as plain ASCII/ANSI text files.

=========================================
  Repeat   -   Repeat   -   Repeat
=========================================
